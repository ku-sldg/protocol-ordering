---
fullname: Attestation Protocol Ordering
shortname: protocol-ordering
organization: I2S
coqdoc: false

synopsis: Order attestation protocols by their difficulty to attack

description: |-
  Coq library for ordering attestation protocols by their difficulty to attack. 
  Given the sets of all possible attacks on two attestation protocols, determines 
  which protocol is better.


authors:
- name: Sarah Johnson
  initial: false
- name: Anna Fritz
  initial: false
- name: Perry Alexander
  initial: false



supported_coq_versions:
  text: 8.20 or later
  opam: '{>= "8.20"}'

namespace: AttestationProtocolOrdering

license:
  fullname: GNU GENERAL PUBLIC LICENSE VERSION 2
  file: LICENSE


build: |-
  ## Building and installation instructions
  Compile all the definitions and proof scripts with:
  ``` shell
  make
  ```
  
  Optionally, install a local version of the library with:
  ``` shell
  make install
  ```

documentation: |-
  ## Documentation
  To order two attestation protocols, first generate all possible attacks. Attacks should be in an abstract form: 
  directed graph where nodes are either measurement events or adversarial corruption/repair events and 
  edges are chronological time. We recommend using the Chase model finder to enumerate all possible 
  attacks on an attestation protocol specified in the Copland domain-specific language. For examples using 
  Chase with the AttestationProtocolOrdering library, please see the ProtocolOrderingExamples repository at 
  git@github.com:ku-sldg/protocol-ordering-examples.git. 
  
  The function `order_fix` decidably determines the ordering relationship between two attestation protocols 
  specified by their sets of attacks returning either `equiv` if they are equally difficult to attack, `leq` if the
  first protocol is easier to attack, `geq` if the first protocol is harder to attack, or `incomparable` if an ordering
  cannot be determined between them. 

  ## File Contents
  * `attackgraph.v` : attack graph data structure definition
  * `attackgraph_normalization.v` : attack graph normalization procedure
  * `attackgraph_adversary.v` : sets of adversary events and time-constrained adversary events
  * `attackgraph_ordering.v` : equivalence and partial order relations over attack graphs
  * `set_minimization.v` : reduces set of attack graphs to its minimal (i.e., easiest) elements
  * `set_ordering.v` : equivalence and partial order relations over sets of attack graphs
  * `set_relationship.v` : ordering relationship options